#Questa NetworkPolicy limita il traffico in entrata ai pod che hanno l'etichetta network/kafka-network: 
#"true" in modo che possano ricevere dati solo da altri pod con la stessa etichetta. Nessun altro traffico Ã¨ consentito.

apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: kafka-network
  namespace: my-app
spec:
  podSelector:
    matchLabels:
      network/kafka-network: "true"
  ingress:
    - from:
        - podSelector:
            matchLabels:
              network/kafka-network: "true"  # Mantieni la regola esistente per i pod con questa etichetta
    - from:
        - namespaceSelector:
            matchLabels:
              name: monitoring  # Usa matchLabels per selezionare il namespace 'monitoring'

---
# ----------------------- ZOOKEEPER ---------------------------------
apiVersion: v1
kind: Service
metadata:
  labels:
    app: zookeeper
  name: zookeeper
  namespace: my-app
spec:
  ports:
    - name: "2181"
      port: 2181
      targetPort: 2181
  selector:
    app: zookeeper
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: zookeeper
  name: zookeeper-deployment
  namespace: my-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: zookeeper
  template:
    metadata:
      labels:
        network/kafka-network: "true"
        app: zookeeper
    spec:
      containers:
        - env:
            - name: ZOOKEEPER_CLIENT_PORT
              value: "2181"
            - name: ZOOKEEPER_SERVER_ID
              value: "1"
          image: confluentinc/cp-zookeeper:7.0.1
          name: zookeeper-cntr
          ports:
            - containerPort: 2181
      hostname: zookeeper-host
      restartPolicy: Always



---
# ----------------------------- KAFKA ---------------------------------------------

apiVersion: v1
kind: Service
metadata:
  labels:
    app: kafka
  name: kafka
  namespace: my-app
spec:
  selector:
    app: kafka
  type: NodePort
  ports:
    - name: internal
      port: 9092
      targetPort: 9092
    - name: external
      port: 30092
      targetPort: 29092
      nodePort: 30092
  

---

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: kafka
  name: kafka-deployment
  namespace: my-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kafka
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        network/kafka-network: "true"
        app: kafka
    spec:
      nodeSelector:
        custom-label: "worker"
      enableServiceLinks: false
      containers:
        - env:
            - name: KAFKA_ADVERTISED_LISTENERS
              value: "INTERNAL://kafka:9092,LISTENER_EXTERNAL://kafka:29092"
            - name: KAFKA_AUTO_CREATE_TOPICS_ENABLE
              value: "true"
            - name: KAFKA_BROKER_ID
              value: "1"
            - name: KAFKA_DEFAULT_REPLICATION_FACTOR
              value: "1"
            - name: KAFKA_INTER_BROKER_LISTENER_NAME
              value: "INTERNAL"
            - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
              value: "INTERNAL:PLAINTEXT,LISTENER_EXTERNAL:PLAINTEXT"
            - name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
              value: "1"
            - name: KAFKA_ZOOKEEPER_CONNECT
              value: "zookeeper:2181"
            - name: KAFKA_NUM_PARTITIONS
              value: "1"
          image: confluentinc/cp-kafka:latest
          imagePullPolicy: IfNotPresent
          name: kafka-cntr
          ports:
            - containerPort: 29092
            - containerPort: 9092
      restartPolicy: Always
      hostname: kafka-host
      

